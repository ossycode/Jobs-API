openapi: 3.1.0
info:
  title: Job-API
  contact: {}
  version: "1.0"
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
servers:
  - url: https://jobs-api-736j.onrender.com/api/v1
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register User
      operationId: RegisterUser
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RegisterUserRequest"
                - examples:
                    - name: Peter
                      email: test2@test.com
              contentMediaType: application/json
            example:
              name: Peter
              email: test2@test.com
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
    parameters: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: Login
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/LoginRequest"
                - examples:
                    - email: test2@test.com
                      password: password12
              contentMediaType: application/json
            example:
              email: test2@test.com
              password: password12
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
    parameters: []
  /jobs:
    post:
      tags:
        - Job
      summary: Create Job
      operationId: CreateJob
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateJobRequest"
                - examples:
                    - company: Otta
                      position: Project Manager
              contentMediaType: application/json
            example:
              company: Otta
              position: Project Manager
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    get:
      tags:
        - Job
      summary: All Jobs for User
      operationId: AllJobsforUser
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    parameters: []
  /jobs/{id}:
    get:
      tags:
        - Job
      summary: Get Single Job
      operationId: GetSingleJob
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Job
      summary: Update Job
      operationId: UpdateJob
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateJobRequest"
                - examples:
                    - status: interview
              contentMediaType: application/json
            example:
              status: interview
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Job
      summary: Delete Job
      operationId: DeleteJob
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    parameters: []
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
      required:
        - name
        - email
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      examples:
        - name: Peter
          email: test2@test.com
    LoginRequest:
      title: LoginRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      examples:
        - email: test2@test.com
          password: password12
    CreateJobRequest:
      title: CreateJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      examples:
        - company: Otta
          position: Project Manager
    UpdateJobRequest:
      title: UpdateJobRequest
      required:
        - status
      type: object
      properties:
        status:
          type: string
      examples:
        - status: interview
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Auth
    description: ""
  - name: Job
    description: ""
